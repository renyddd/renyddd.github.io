<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on renyddd blog site</title><link>https://blog.renyddd.top/tags/golang/</link><description>Recent content in golang on renyddd blog site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Jul 2021 10:38:52 +0800</lastBuildDate><atom:link href="https://blog.renyddd.top/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Tips</title><link>https://blog.renyddd.top/posts/golang-tips/</link><pubDate>Sun, 25 Jul 2021 10:38:52 +0800</pubDate><guid>https://blog.renyddd.top/posts/golang-tips/</guid><description>golang 小技巧 本文主要记录一些在各种文档中看到的有趣且使用的 golang 小技巧代码片段。 os.Signal ref：https://golang.org/pkg/databa</description></item><item><title>Grpc Tutorial</title><link>https://blog.renyddd.top/posts/grpc-tutorial/</link><pubDate>Wed, 14 Jul 2021 22:37:45 +0800</pubDate><guid>https://blog.renyddd.top/posts/grpc-tutorial/</guid><description>gRPC Tutorial 首先参考官方 Basics Tutorial 来完成一次简单的构建，本文以下内容皆是对官方文档的模仿： 定义自己的 service .proto 文件； 通过 protocol buffer compiler 生成 C/S 端代码； 为你的 service 通过 go gRPC API 编</description></item><item><title>Golang Mod</title><link>https://blog.renyddd.top/posts/golang-mod/</link><pubDate>Mon, 21 Jun 2021 17:31:12 +0800</pubDate><guid>https://blog.renyddd.top/posts/golang-mod/</guid><description>go mod 与 git tag 报错跟踪记录 因笔者想使用某仓库的某一函数（xxxpkg.Hello 为例），该仓库已通过 git clone 至本地，通过独立的 ide 窗口进行查看。我自己</description></item><item><title>Golang Pkg Heap</title><link>https://blog.renyddd.top/posts/golang-pkg-heap/</link><pubDate>Sun, 20 Jun 2021 11:26:50 +0800</pubDate><guid>https://blog.renyddd.top/posts/golang-pkg-heap/</guid><description>heap 实现 官方文档地址：https://golang.org/src/container/heap/heap.go 堆就是一棵完全二叉树，并且你也</description></item></channel></rss>